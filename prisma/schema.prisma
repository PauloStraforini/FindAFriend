generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  username      String
  registration  String   @unique // matrícula
  password_hash String
  dateOfBirth   DateTime @map("date_of_birth") // data de aniversario
  cpf           String   @unique @db.VarChar(11)
  email         String   @unique
  position      Position

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

enum Position {
  ADMIN
  MANAGER
  USER
}

model Tutors {
  // Informações gerais
  id          String    @id @default(uuid())
  cpf         String    @unique @db.VarChar(11)
  cnpj        String?   @unique @db.VarChar(14)
  username    String
  socialName  String?   @map("social_name") // nome social
  email       String?   @unique
  dateOfBirth DateTime? @map("date_of_birth")
  phoneNumber String    @map("phone_number") // Numero de telefone
  gender      Gender // Genero 
  uniqueCard  String?   @unique @map("unique_card") // cartão referente ao Bolsa Família
  about       String?

  // Endereço
  cep          String? @db.VarChar(8)
  street       String? // Rua
  numberHouse  String? @map("number_house") // Numero da casa
  complement   String? // Complemento (ex: 'Bloco 25')
  neighborhood String? // Vizinhança
  city         String?

  // Contato de emergência
  nameEmergencyContact String? @map("name_emergency_contact")
  phoneNumberEmergency String? @map("phone_number_emergency")

  // Relacionamento
  pets Pet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Pet {
  // Informações Gerais
  id           String    @id @default(uuid())
  rga          String    @unique @db.VarChar(15)
  name         String
  dateOfBirth  DateTime? @map("date_of_birth") // Data de nascimento
  age          String?
  castrated    Boolean? // Castrado?
  sex          SEX // sexo do pet
  type         TYPE // Espécie (ex: cachorro, gato)
  breed        String // Raça
  weight       Decimal? // Peso
  weightClass  String?   @map("weight_class") @db.VarChar(20) // Ex: "0-5kg", "6-15kg"
  primaryColor String?   @map("primary_color") // Cor predominante
  about        String

  // Identificação
  microchip               String?   @unique @db.VarChar(15)
  dateOfApplication       DateTime? @map("date_of_application")
  veterinarian            String?
  manufacturerOfMicrochip String?   @map("manufacturer_of_microchip") // Fabricante de microchip

  // Informações adicionais
  socialName      String? @map("social_name") // Nome social
  origin          String? // Procedência
  housing         String? // Tipo de moradia
  characteristics String? // Características do pet

  // Relacionamentos
  event    Event   @relation(fields: [orgId], references: [id])
  orgId    String  @map("org_id")
  Tutors   Tutors? @relation(fields: [tutorsId], references: [id])
  tutorsId String? @map("tutors_id")

  // Datas
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pets")
}

enum SEX {
  MALE
  FEMALE
  OTHER
}

enum TYPE {
  CAT
  DOG
}

model Event {
  // Informações gerais do evento
  id           String       @id @default(uuid())
  title        String
  description  String?
  statsOfEvent StatsOfEvent @map("stats_of_event") // Status do evento
  latitude     Decimal
  longitude    Decimal
  cep          String       @db.VarChar(8)
  street       String // Rua
  neighborhood String // Bairro
  numberHouse  String?      @map("number_house")
  complement   String? // Complemento (ex: 'Bloco 25')
  authorName   String?      @map("author_name")
  email        String?      @unique
  phone        String?

  //Filters
  acceptedAnimalTypes String[] @map("accepted_animal_types") // Tipos de animais aceitos
  acceptedSexes       String[] @map("accepted_sexes") // Tipos de sexo de pet aceitos
  excludedBreeds      String[] @map("exclude_breeds")

  //datas
  dateOfEvent    DateTime @map("date_of_event")
  startTime      DateTime @map("start_time")
  endTime        DateTime @map("end_time")
  totalVacancies Int      @map("total_vacancies") // total de vagas
  registered     String // Incritos

  pets Pet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("events")
}

enum StatsOfEvent {
  PENDING
  ACTIVE
  FINISHED
  CANCELLED
}
